/*
 * This file is generated by jOOQ.
 */
package io.exflo.postgres.jooq.tables;


import io.exflo.postgres.jooq.Indexes;
import io.exflo.postgres.jooq.Keys;
import io.exflo.postgres.jooq.Public;
import io.exflo.postgres.jooq.enums.DeltaType;
import io.exflo.postgres.jooq.tables.records.BalanceDeltaRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BalanceDelta extends TableImpl<BalanceDeltaRecord> {

    private static final long serialVersionUID = 2014990781;

    /**
     * The reference instance of <code>public.balance_delta</code>
     */
    public static final BalanceDelta BALANCE_DELTA = new BalanceDelta();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BalanceDeltaRecord> getRecordType() {
        return BalanceDeltaRecord.class;
    }

    /**
     * The column <code>public.balance_delta.id</code>.
     */
    public final TableField<BalanceDeltaRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('balance_delta_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.balance_delta.delta_type</code>.
     */
    public final TableField<BalanceDeltaRecord, DeltaType> DELTA_TYPE = createField(DSL.name("delta_type"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false).asEnumDataType(io.exflo.postgres.jooq.enums.DeltaType.class), this, "");

    /**
     * The column <code>public.balance_delta.contract_address</code>.
     */
    public final TableField<BalanceDeltaRecord, String> CONTRACT_ADDRESS = createField(DSL.name("contract_address"), org.jooq.impl.SQLDataType.CHAR(42), this, "");

    /**
     * The column <code>public.balance_delta.from</code>.
     */
    public final TableField<BalanceDeltaRecord, String> FROM = createField(DSL.name("from"), org.jooq.impl.SQLDataType.CHAR(42), this, "");

    /**
     * The column <code>public.balance_delta.to</code>.
     */
    public final TableField<BalanceDeltaRecord, String> TO = createField(DSL.name("to"), org.jooq.impl.SQLDataType.CHAR(42).nullable(false), this, "");

    /**
     * The column <code>public.balance_delta.amount</code>.
     */
    public final TableField<BalanceDeltaRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.balance_delta.token_id</code>.
     */
    public final TableField<BalanceDeltaRecord, BigDecimal> TOKEN_ID = createField(DSL.name("token_id"), org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.balance_delta.block_number</code>.
     */
    public final TableField<BalanceDeltaRecord, Long> BLOCK_NUMBER = createField(DSL.name("block_number"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.balance_delta.block_hash</code>.
     */
    public final TableField<BalanceDeltaRecord, String> BLOCK_HASH = createField(DSL.name("block_hash"), org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.balance_delta.transaction_hash</code>.
     */
    public final TableField<BalanceDeltaRecord, String> TRANSACTION_HASH = createField(DSL.name("transaction_hash"), org.jooq.impl.SQLDataType.CHAR(66), this, "");

    /**
     * The column <code>public.balance_delta.transaction_index</code>.
     */
    public final TableField<BalanceDeltaRecord, Integer> TRANSACTION_INDEX = createField(DSL.name("transaction_index"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.balance_delta.block_timestamp</code>.
     */
    public final TableField<BalanceDeltaRecord, Timestamp> BLOCK_TIMESTAMP = createField(DSL.name("block_timestamp"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>public.balance_delta</code> table reference
     */
    public BalanceDelta() {
        this(DSL.name("balance_delta"), null);
    }

    /**
     * Create an aliased <code>public.balance_delta</code> table reference
     */
    public BalanceDelta(String alias) {
        this(DSL.name(alias), BALANCE_DELTA);
    }

    /**
     * Create an aliased <code>public.balance_delta</code> table reference
     */
    public BalanceDelta(Name alias) {
        this(alias, BALANCE_DELTA);
    }

    private BalanceDelta(Name alias, Table<BalanceDeltaRecord> aliased) {
        this(alias, aliased, null);
    }

    private BalanceDelta(Name alias, Table<BalanceDeltaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> BalanceDelta(Table<O> child, ForeignKey<O, BalanceDeltaRecord> key) {
        super(child, key, BALANCE_DELTA);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BALANCE_DELTA_PKEY, Indexes.IDX_BALANCE_DELTA__BLOCK_NUMBER_DESC, Indexes.IDX_BALANCE_DELTA__TRANSACTION_HASH);
    }

    @Override
    public Identity<BalanceDeltaRecord, Long> getIdentity() {
        return Keys.IDENTITY_BALANCE_DELTA;
    }

    @Override
    public UniqueKey<BalanceDeltaRecord> getPrimaryKey() {
        return Keys.BALANCE_DELTA_PKEY;
    }

    @Override
    public List<UniqueKey<BalanceDeltaRecord>> getKeys() {
        return Arrays.<UniqueKey<BalanceDeltaRecord>>asList(Keys.BALANCE_DELTA_PKEY);
    }

    @Override
    public List<ForeignKey<BalanceDeltaRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BalanceDeltaRecord, ?>>asList(Keys.BALANCE_DELTA__BALANCE_DELTA_BLOCK_HASH_FKEY, Keys.BALANCE_DELTA__BALANCE_DELTA_TRANSACTION_HASH_FKEY);
    }

    public BlockHeader blockHeader() {
        return new BlockHeader(this, Keys.BALANCE_DELTA__BALANCE_DELTA_BLOCK_HASH_FKEY);
    }

    public Transaction transaction() {
        return new Transaction(this, Keys.BALANCE_DELTA__BALANCE_DELTA_TRANSACTION_HASH_FKEY);
    }

    @Override
    public BalanceDelta as(String alias) {
        return new BalanceDelta(DSL.name(alias), this);
    }

    @Override
    public BalanceDelta as(Name alias) {
        return new BalanceDelta(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BalanceDelta rename(String name) {
        return new BalanceDelta(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BalanceDelta rename(Name name) {
        return new BalanceDelta(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, DeltaType, String, String, String, BigDecimal, BigDecimal, Long, String, String, Integer, Timestamp> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
