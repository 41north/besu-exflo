/*
 * This file is generated by jOOQ.
 */
package io.exflo.postgres.jooq.tables;


import io.exflo.postgres.jooq.Indexes;
import io.exflo.postgres.jooq.Keys;
import io.exflo.postgres.jooq.Public;
import io.exflo.postgres.jooq.tables.records.MetadataRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Metadata extends TableImpl<MetadataRecord> {

    private static final long serialVersionUID = -1408823409;

    /**
     * The reference instance of <code>public.metadata</code>
     */
    public static final Metadata METADATA = new Metadata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MetadataRecord> getRecordType() {
        return MetadataRecord.class;
    }

    /**
     * The column <code>public.metadata.key</code>.
     */
    public final TableField<MetadataRecord, String> KEY = createField(DSL.name("key"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.metadata.value</code>.
     */
    public final TableField<MetadataRecord, String> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.VARCHAR(2048).nullable(false), this, "");

    /**
     * Create a <code>public.metadata</code> table reference
     */
    public Metadata() {
        this(DSL.name("metadata"), null);
    }

    /**
     * Create an aliased <code>public.metadata</code> table reference
     */
    public Metadata(String alias) {
        this(DSL.name(alias), METADATA);
    }

    /**
     * Create an aliased <code>public.metadata</code> table reference
     */
    public Metadata(Name alias) {
        this(alias, METADATA);
    }

    private Metadata(Name alias, Table<MetadataRecord> aliased) {
        this(alias, aliased, null);
    }

    private Metadata(Name alias, Table<MetadataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Metadata(Table<O> child, ForeignKey<O, MetadataRecord> key) {
        super(child, key, METADATA);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.METADATA_PKEY);
    }

    @Override
    public UniqueKey<MetadataRecord> getPrimaryKey() {
        return Keys.METADATA_PKEY;
    }

    @Override
    public List<UniqueKey<MetadataRecord>> getKeys() {
        return Arrays.<UniqueKey<MetadataRecord>>asList(Keys.METADATA_PKEY);
    }

    @Override
    public Metadata as(String alias) {
        return new Metadata(DSL.name(alias), this);
    }

    @Override
    public Metadata as(Name alias) {
        return new Metadata(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Metadata rename(String name) {
        return new Metadata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Metadata rename(Name name) {
        return new Metadata(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
