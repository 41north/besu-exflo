/*
 * This file is generated by jOOQ.
 */
package io.exflo.postgres.jooq.enums;


import io.exflo.postgres.jooq.Public;

import javax.annotation.processing.Generated;

import org.jooq.Catalog;
import org.jooq.EnumType;
import org.jooq.Schema;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public enum ContractEventType implements EnumType {

    fungible_approval("fungible_approval"),

    fungible_transfer("fungible_transfer"),

    non_fungible_approval("non_fungible_approval"),

    approval_for_all("approval_for_all"),

    non_fungible_transfer("non_fungible_transfer"),

    sent("sent"),

    minted("minted"),

    burned("burned"),

    authorized_operator("authorized_operator"),

    revoked_operator("revoked_operator"),

    transfer_single("transfer_single"),

    transfer_batch("transfer_batch"),

    uri("uri");

    private final String literal;

    private ContractEventType(String literal) {
        this.literal = literal;
    }

    @Override
    public Catalog getCatalog() {
        return getSchema() == null ? null : getSchema().getCatalog();
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public String getName() {
        return "contract_event_type";
    }

    @Override
    public String getLiteral() {
        return literal;
    }
}
