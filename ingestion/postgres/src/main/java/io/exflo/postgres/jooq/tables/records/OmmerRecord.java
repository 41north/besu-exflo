/*
 * This file is generated by jOOQ.
 */
package io.exflo.postgres.jooq.tables.records;


import io.exflo.postgres.jooq.tables.Ommer;

import java.math.BigDecimal;
import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record19;
import org.jooq.Row19;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OmmerRecord extends UpdatableRecordImpl<OmmerRecord> implements Record19<String, Long, String, Long, String, Integer, Long, String, String, String, String, String, BigDecimal, byte[], Long, Long, Timestamp, String, String> {

    private static final long serialVersionUID = -1604333368;

    /**
     * Setter for <code>public.ommer.hash</code>.
     */
    public OmmerRecord setHash(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.ommer.hash</code>.
     */
    public String getHash() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.ommer.number</code>.
     */
    public OmmerRecord setNumber(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.ommer.number</code>.
     */
    public Long getNumber() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.ommer.nephew_hash</code>.
     */
    public OmmerRecord setNephewHash(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.ommer.nephew_hash</code>.
     */
    public String getNephewHash() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.ommer.height</code>.
     */
    public OmmerRecord setHeight(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.ommer.height</code>.
     */
    public Long getHeight() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>public.ommer.parent_hash</code>.
     */
    public OmmerRecord setParentHash(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.ommer.parent_hash</code>.
     */
    public String getParentHash() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.ommer.index</code>.
     */
    public OmmerRecord setIndex(Integer value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.ommer.index</code>.
     */
    public Integer getIndex() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>public.ommer.nonce</code>.
     */
    public OmmerRecord setNonce(Long value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.ommer.nonce</code>.
     */
    public Long getNonce() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>public.ommer.ommers_hash</code>.
     */
    public OmmerRecord setOmmersHash(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.ommer.ommers_hash</code>.
     */
    public String getOmmersHash() {
        return (String) get(7);
    }

    /**
     * Setter for <code>public.ommer.state_root</code>.
     */
    public OmmerRecord setStateRoot(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.ommer.state_root</code>.
     */
    public String getStateRoot() {
        return (String) get(8);
    }

    /**
     * Setter for <code>public.ommer.receipts_root</code>.
     */
    public OmmerRecord setReceiptsRoot(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>public.ommer.receipts_root</code>.
     */
    public String getReceiptsRoot() {
        return (String) get(9);
    }

    /**
     * Setter for <code>public.ommer.transactions_root</code>.
     */
    public OmmerRecord setTransactionsRoot(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>public.ommer.transactions_root</code>.
     */
    public String getTransactionsRoot() {
        return (String) get(10);
    }

    /**
     * Setter for <code>public.ommer.coinbase</code>.
     */
    public OmmerRecord setCoinbase(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>public.ommer.coinbase</code>.
     */
    public String getCoinbase() {
        return (String) get(11);
    }

    /**
     * Setter for <code>public.ommer.difficulty</code>.
     */
    public OmmerRecord setDifficulty(BigDecimal value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>public.ommer.difficulty</code>.
     */
    public BigDecimal getDifficulty() {
        return (BigDecimal) get(12);
    }

    /**
     * Setter for <code>public.ommer.extra_data</code>.
     */
    public OmmerRecord setExtraData(byte... value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>public.ommer.extra_data</code>.
     */
    public byte[] getExtraData() {
        return (byte[]) get(13);
    }

    /**
     * Setter for <code>public.ommer.gas_limit</code>.
     */
    public OmmerRecord setGasLimit(Long value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>public.ommer.gas_limit</code>.
     */
    public Long getGasLimit() {
        return (Long) get(14);
    }

    /**
     * Setter for <code>public.ommer.gas_used</code>.
     */
    public OmmerRecord setGasUsed(Long value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>public.ommer.gas_used</code>.
     */
    public Long getGasUsed() {
        return (Long) get(15);
    }

    /**
     * Setter for <code>public.ommer.timestamp</code>.
     */
    public OmmerRecord setTimestamp(Timestamp value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>public.ommer.timestamp</code>.
     */
    public Timestamp getTimestamp() {
        return (Timestamp) get(16);
    }

    /**
     * Setter for <code>public.ommer.mix_hash</code>.
     */
    public OmmerRecord setMixHash(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>public.ommer.mix_hash</code>.
     */
    public String getMixHash() {
        return (String) get(17);
    }

    /**
     * Setter for <code>public.ommer.logs_bloom</code>.
     */
    public OmmerRecord setLogsBloom(String value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>public.ommer.logs_bloom</code>.
     */
    public String getLogsBloom() {
        return (String) get(18);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record19 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row19<String, Long, String, Long, String, Integer, Long, String, String, String, String, String, BigDecimal, byte[], Long, Long, Timestamp, String, String> fieldsRow() {
        return (Row19) super.fieldsRow();
    }

    @Override
    public Row19<String, Long, String, Long, String, Integer, Long, String, String, String, String, String, BigDecimal, byte[], Long, Long, Timestamp, String, String> valuesRow() {
        return (Row19) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Ommer.OMMER.HASH;
    }

    @Override
    public Field<Long> field2() {
        return Ommer.OMMER.NUMBER;
    }

    @Override
    public Field<String> field3() {
        return Ommer.OMMER.NEPHEW_HASH;
    }

    @Override
    public Field<Long> field4() {
        return Ommer.OMMER.HEIGHT;
    }

    @Override
    public Field<String> field5() {
        return Ommer.OMMER.PARENT_HASH;
    }

    @Override
    public Field<Integer> field6() {
        return Ommer.OMMER.INDEX;
    }

    @Override
    public Field<Long> field7() {
        return Ommer.OMMER.NONCE;
    }

    @Override
    public Field<String> field8() {
        return Ommer.OMMER.OMMERS_HASH;
    }

    @Override
    public Field<String> field9() {
        return Ommer.OMMER.STATE_ROOT;
    }

    @Override
    public Field<String> field10() {
        return Ommer.OMMER.RECEIPTS_ROOT;
    }

    @Override
    public Field<String> field11() {
        return Ommer.OMMER.TRANSACTIONS_ROOT;
    }

    @Override
    public Field<String> field12() {
        return Ommer.OMMER.COINBASE;
    }

    @Override
    public Field<BigDecimal> field13() {
        return Ommer.OMMER.DIFFICULTY;
    }

    @Override
    public Field<byte[]> field14() {
        return Ommer.OMMER.EXTRA_DATA;
    }

    @Override
    public Field<Long> field15() {
        return Ommer.OMMER.GAS_LIMIT;
    }

    @Override
    public Field<Long> field16() {
        return Ommer.OMMER.GAS_USED;
    }

    @Override
    public Field<Timestamp> field17() {
        return Ommer.OMMER.TIMESTAMP;
    }

    @Override
    public Field<String> field18() {
        return Ommer.OMMER.MIX_HASH;
    }

    @Override
    public Field<String> field19() {
        return Ommer.OMMER.LOGS_BLOOM;
    }

    @Override
    public String component1() {
        return getHash();
    }

    @Override
    public Long component2() {
        return getNumber();
    }

    @Override
    public String component3() {
        return getNephewHash();
    }

    @Override
    public Long component4() {
        return getHeight();
    }

    @Override
    public String component5() {
        return getParentHash();
    }

    @Override
    public Integer component6() {
        return getIndex();
    }

    @Override
    public Long component7() {
        return getNonce();
    }

    @Override
    public String component8() {
        return getOmmersHash();
    }

    @Override
    public String component9() {
        return getStateRoot();
    }

    @Override
    public String component10() {
        return getReceiptsRoot();
    }

    @Override
    public String component11() {
        return getTransactionsRoot();
    }

    @Override
    public String component12() {
        return getCoinbase();
    }

    @Override
    public BigDecimal component13() {
        return getDifficulty();
    }

    @Override
    public byte[] component14() {
        return getExtraData();
    }

    @Override
    public Long component15() {
        return getGasLimit();
    }

    @Override
    public Long component16() {
        return getGasUsed();
    }

    @Override
    public Timestamp component17() {
        return getTimestamp();
    }

    @Override
    public String component18() {
        return getMixHash();
    }

    @Override
    public String component19() {
        return getLogsBloom();
    }

    @Override
    public String value1() {
        return getHash();
    }

    @Override
    public Long value2() {
        return getNumber();
    }

    @Override
    public String value3() {
        return getNephewHash();
    }

    @Override
    public Long value4() {
        return getHeight();
    }

    @Override
    public String value5() {
        return getParentHash();
    }

    @Override
    public Integer value6() {
        return getIndex();
    }

    @Override
    public Long value7() {
        return getNonce();
    }

    @Override
    public String value8() {
        return getOmmersHash();
    }

    @Override
    public String value9() {
        return getStateRoot();
    }

    @Override
    public String value10() {
        return getReceiptsRoot();
    }

    @Override
    public String value11() {
        return getTransactionsRoot();
    }

    @Override
    public String value12() {
        return getCoinbase();
    }

    @Override
    public BigDecimal value13() {
        return getDifficulty();
    }

    @Override
    public byte[] value14() {
        return getExtraData();
    }

    @Override
    public Long value15() {
        return getGasLimit();
    }

    @Override
    public Long value16() {
        return getGasUsed();
    }

    @Override
    public Timestamp value17() {
        return getTimestamp();
    }

    @Override
    public String value18() {
        return getMixHash();
    }

    @Override
    public String value19() {
        return getLogsBloom();
    }

    @Override
    public OmmerRecord value1(String value) {
        setHash(value);
        return this;
    }

    @Override
    public OmmerRecord value2(Long value) {
        setNumber(value);
        return this;
    }

    @Override
    public OmmerRecord value3(String value) {
        setNephewHash(value);
        return this;
    }

    @Override
    public OmmerRecord value4(Long value) {
        setHeight(value);
        return this;
    }

    @Override
    public OmmerRecord value5(String value) {
        setParentHash(value);
        return this;
    }

    @Override
    public OmmerRecord value6(Integer value) {
        setIndex(value);
        return this;
    }

    @Override
    public OmmerRecord value7(Long value) {
        setNonce(value);
        return this;
    }

    @Override
    public OmmerRecord value8(String value) {
        setOmmersHash(value);
        return this;
    }

    @Override
    public OmmerRecord value9(String value) {
        setStateRoot(value);
        return this;
    }

    @Override
    public OmmerRecord value10(String value) {
        setReceiptsRoot(value);
        return this;
    }

    @Override
    public OmmerRecord value11(String value) {
        setTransactionsRoot(value);
        return this;
    }

    @Override
    public OmmerRecord value12(String value) {
        setCoinbase(value);
        return this;
    }

    @Override
    public OmmerRecord value13(BigDecimal value) {
        setDifficulty(value);
        return this;
    }

    @Override
    public OmmerRecord value14(byte... value) {
        setExtraData(value);
        return this;
    }

    @Override
    public OmmerRecord value15(Long value) {
        setGasLimit(value);
        return this;
    }

    @Override
    public OmmerRecord value16(Long value) {
        setGasUsed(value);
        return this;
    }

    @Override
    public OmmerRecord value17(Timestamp value) {
        setTimestamp(value);
        return this;
    }

    @Override
    public OmmerRecord value18(String value) {
        setMixHash(value);
        return this;
    }

    @Override
    public OmmerRecord value19(String value) {
        setLogsBloom(value);
        return this;
    }

    @Override
    public OmmerRecord values(String value1, Long value2, String value3, Long value4, String value5, Integer value6, Long value7, String value8, String value9, String value10, String value11, String value12, BigDecimal value13, byte[] value14, Long value15, Long value16, Timestamp value17, String value18, String value19) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        value19(value19);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OmmerRecord
     */
    public OmmerRecord() {
        super(Ommer.OMMER);
    }

    /**
     * Create a detached, initialised OmmerRecord
     */
    public OmmerRecord(String hash, Long number, String nephewHash, Long height, String parentHash, Integer index, Long nonce, String ommersHash, String stateRoot, String receiptsRoot, String transactionsRoot, String coinbase, BigDecimal difficulty, byte[] extraData, Long gasLimit, Long gasUsed, Timestamp timestamp, String mixHash, String logsBloom) {
        super(Ommer.OMMER);

        set(0, hash);
        set(1, number);
        set(2, nephewHash);
        set(3, height);
        set(4, parentHash);
        set(5, index);
        set(6, nonce);
        set(7, ommersHash);
        set(8, stateRoot);
        set(9, receiptsRoot);
        set(10, transactionsRoot);
        set(11, coinbase);
        set(12, difficulty);
        set(13, extraData);
        set(14, gasLimit);
        set(15, gasUsed);
        set(16, timestamp);
        set(17, mixHash);
        set(18, logsBloom);
    }
}
