/*
 * This file is generated by jOOQ.
 */
package io.exflo.postgres.jooq.tables;


import io.exflo.postgres.jooq.Public;
import io.exflo.postgres.jooq.enums.DeltaType;
import io.exflo.postgres.jooq.tables.records.InternalTransactionRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InternalTransaction extends TableImpl<InternalTransactionRecord> {

    private static final long serialVersionUID = 1142274877;

    /**
     * The reference instance of <code>public.internal_transaction</code>
     */
    public static final InternalTransaction INTERNAL_TRANSACTION = new InternalTransaction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InternalTransactionRecord> getRecordType() {
        return InternalTransactionRecord.class;
    }

    /**
     * The column <code>public.internal_transaction.id</code>.
     */
    public final TableField<InternalTransactionRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.internal_transaction.delta_type</code>.
     */
    public final TableField<InternalTransactionRecord, DeltaType> DELTA_TYPE = createField(DSL.name("delta_type"), org.jooq.impl.SQLDataType.VARCHAR.asEnumDataType(io.exflo.postgres.jooq.enums.DeltaType.class), this, "");

    /**
     * The column <code>public.internal_transaction.from</code>.
     */
    public final TableField<InternalTransactionRecord, String> FROM = createField(DSL.name("from"), org.jooq.impl.SQLDataType.CHAR(42), this, "");

    /**
     * The column <code>public.internal_transaction.to</code>.
     */
    public final TableField<InternalTransactionRecord, String> TO = createField(DSL.name("to"), org.jooq.impl.SQLDataType.CHAR(42), this, "");

    /**
     * The column <code>public.internal_transaction.amount</code>.
     */
    public final TableField<InternalTransactionRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.internal_transaction.block_number</code>.
     */
    public final TableField<InternalTransactionRecord, Long> BLOCK_NUMBER = createField(DSL.name("block_number"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.internal_transaction.block_hash</code>.
     */
    public final TableField<InternalTransactionRecord, String> BLOCK_HASH = createField(DSL.name("block_hash"), org.jooq.impl.SQLDataType.CHAR(66), this, "");

    /**
     * The column <code>public.internal_transaction.block_timestamp</code>.
     */
    public final TableField<InternalTransactionRecord, Timestamp> BLOCK_TIMESTAMP = createField(DSL.name("block_timestamp"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.internal_transaction.transaction_hash</code>.
     */
    public final TableField<InternalTransactionRecord, String> TRANSACTION_HASH = createField(DSL.name("transaction_hash"), org.jooq.impl.SQLDataType.CHAR(66), this, "");

    /**
     * The column <code>public.internal_transaction.transaction_index</code>.
     */
    public final TableField<InternalTransactionRecord, Integer> TRANSACTION_INDEX = createField(DSL.name("transaction_index"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.internal_transaction</code> table reference
     */
    public InternalTransaction() {
        this(DSL.name("internal_transaction"), null);
    }

    /**
     * Create an aliased <code>public.internal_transaction</code> table reference
     */
    public InternalTransaction(String alias) {
        this(DSL.name(alias), INTERNAL_TRANSACTION);
    }

    /**
     * Create an aliased <code>public.internal_transaction</code> table reference
     */
    public InternalTransaction(Name alias) {
        this(alias, INTERNAL_TRANSACTION);
    }

    private InternalTransaction(Name alias, Table<InternalTransactionRecord> aliased) {
        this(alias, aliased, null);
    }

    private InternalTransaction(Name alias, Table<InternalTransactionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> InternalTransaction(Table<O> child, ForeignKey<O, InternalTransactionRecord> key) {
        super(child, key, INTERNAL_TRANSACTION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public InternalTransaction as(String alias) {
        return new InternalTransaction(DSL.name(alias), this);
    }

    @Override
    public InternalTransaction as(Name alias) {
        return new InternalTransaction(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InternalTransaction rename(String name) {
        return new InternalTransaction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InternalTransaction rename(Name name) {
        return new InternalTransaction(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, DeltaType, String, String, BigDecimal, Long, String, Timestamp, String, Integer> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
