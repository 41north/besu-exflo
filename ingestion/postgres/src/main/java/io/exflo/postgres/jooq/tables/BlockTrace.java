/*
 * This file is generated by jOOQ.
 */
package io.exflo.postgres.jooq.tables;


import io.exflo.postgres.jooq.Keys;
import io.exflo.postgres.jooq.Public;
import io.exflo.postgres.jooq.tables.records.BlockTraceRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BlockTrace extends TableImpl<BlockTraceRecord> {

    private static final long serialVersionUID = 1547481040;

    /**
     * The reference instance of <code>public.block_trace</code>
     */
    public static final BlockTrace BLOCK_TRACE = new BlockTrace();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BlockTraceRecord> getRecordType() {
        return BlockTraceRecord.class;
    }

    /**
     * The column <code>public.block_trace.block_hash</code>.
     */
    public final TableField<BlockTraceRecord, String> BLOCK_HASH = createField(DSL.name("block_hash"), org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.block_trace.trace</code>.
     */
    public final TableField<BlockTraceRecord, JSONB> TRACE = createField(DSL.name("trace"), org.jooq.impl.SQLDataType.JSONB.nullable(false), this, "");

    /**
     * Create a <code>public.block_trace</code> table reference
     */
    public BlockTrace() {
        this(DSL.name("block_trace"), null);
    }

    /**
     * Create an aliased <code>public.block_trace</code> table reference
     */
    public BlockTrace(String alias) {
        this(DSL.name(alias), BLOCK_TRACE);
    }

    /**
     * Create an aliased <code>public.block_trace</code> table reference
     */
    public BlockTrace(Name alias) {
        this(alias, BLOCK_TRACE);
    }

    private BlockTrace(Name alias, Table<BlockTraceRecord> aliased) {
        this(alias, aliased, null);
    }

    private BlockTrace(Name alias, Table<BlockTraceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> BlockTrace(Table<O> child, ForeignKey<O, BlockTraceRecord> key) {
        super(child, key, BLOCK_TRACE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<BlockTraceRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BlockTraceRecord, ?>>asList(Keys.BLOCK_TRACE__BLOCK_TRACE_BLOCK_HASH_FKEY);
    }

    public BlockHeader blockHeader() {
        return new BlockHeader(this, Keys.BLOCK_TRACE__BLOCK_TRACE_BLOCK_HASH_FKEY);
    }

    @Override
    public BlockTrace as(String alias) {
        return new BlockTrace(DSL.name(alias), this);
    }

    @Override
    public BlockTrace as(Name alias) {
        return new BlockTrace(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BlockTrace rename(String name) {
        return new BlockTrace(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BlockTrace rename(Name name) {
        return new BlockTrace(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, JSONB> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
