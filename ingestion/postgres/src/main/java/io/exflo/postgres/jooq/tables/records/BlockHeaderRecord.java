/*
 * This file is generated by jOOQ.
 */
package io.exflo.postgres.jooq.tables.records;


import io.exflo.postgres.jooq.tables.BlockHeader;

import java.math.BigDecimal;
import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record18;
import org.jooq.Row18;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BlockHeaderRecord extends UpdatableRecordImpl<BlockHeaderRecord> implements Record18<String, Long, String, Long, Boolean, String, String, String, String, BigDecimal, BigDecimal, byte[], Long, Long, Timestamp, String, String, String> {

    private static final long serialVersionUID = 1797994802;

    /**
     * Setter for <code>public.block_header.hash</code>.
     */
    public BlockHeaderRecord setHash(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.block_header.hash</code>.
     */
    public String getHash() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.block_header.number</code>.
     */
    public BlockHeaderRecord setNumber(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.block_header.number</code>.
     */
    public Long getNumber() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.block_header.parent_hash</code>.
     */
    public BlockHeaderRecord setParentHash(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.block_header.parent_hash</code>.
     */
    public String getParentHash() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.block_header.nonce</code>.
     */
    public BlockHeaderRecord setNonce(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.block_header.nonce</code>.
     */
    public Long getNonce() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>public.block_header.is_canonical</code>.
     */
    public BlockHeaderRecord setIsCanonical(Boolean value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.block_header.is_canonical</code>.
     */
    public Boolean getIsCanonical() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>public.block_header.state_root</code>.
     */
    public BlockHeaderRecord setStateRoot(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.block_header.state_root</code>.
     */
    public String getStateRoot() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.block_header.receipts_root</code>.
     */
    public BlockHeaderRecord setReceiptsRoot(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.block_header.receipts_root</code>.
     */
    public String getReceiptsRoot() {
        return (String) get(6);
    }

    /**
     * Setter for <code>public.block_header.transactions_root</code>.
     */
    public BlockHeaderRecord setTransactionsRoot(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.block_header.transactions_root</code>.
     */
    public String getTransactionsRoot() {
        return (String) get(7);
    }

    /**
     * Setter for <code>public.block_header.coinbase</code>.
     */
    public BlockHeaderRecord setCoinbase(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.block_header.coinbase</code>.
     */
    public String getCoinbase() {
        return (String) get(8);
    }

    /**
     * Setter for <code>public.block_header.difficulty</code>.
     */
    public BlockHeaderRecord setDifficulty(BigDecimal value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>public.block_header.difficulty</code>.
     */
    public BigDecimal getDifficulty() {
        return (BigDecimal) get(9);
    }

    /**
     * Setter for <code>public.block_header.total_difficulty</code>.
     */
    public BlockHeaderRecord setTotalDifficulty(BigDecimal value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>public.block_header.total_difficulty</code>.
     */
    public BigDecimal getTotalDifficulty() {
        return (BigDecimal) get(10);
    }

    /**
     * Setter for <code>public.block_header.extra_data</code>.
     */
    public BlockHeaderRecord setExtraData(byte... value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>public.block_header.extra_data</code>.
     */
    public byte[] getExtraData() {
        return (byte[]) get(11);
    }

    /**
     * Setter for <code>public.block_header.gas_limit</code>.
     */
    public BlockHeaderRecord setGasLimit(Long value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>public.block_header.gas_limit</code>.
     */
    public Long getGasLimit() {
        return (Long) get(12);
    }

    /**
     * Setter for <code>public.block_header.gas_used</code>.
     */
    public BlockHeaderRecord setGasUsed(Long value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>public.block_header.gas_used</code>.
     */
    public Long getGasUsed() {
        return (Long) get(13);
    }

    /**
     * Setter for <code>public.block_header.timestamp</code>.
     */
    public BlockHeaderRecord setTimestamp(Timestamp value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>public.block_header.timestamp</code>.
     */
    public Timestamp getTimestamp() {
        return (Timestamp) get(14);
    }

    /**
     * Setter for <code>public.block_header.mix_hash</code>.
     */
    public BlockHeaderRecord setMixHash(String value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>public.block_header.mix_hash</code>.
     */
    public String getMixHash() {
        return (String) get(15);
    }

    /**
     * Setter for <code>public.block_header.ommers_hash</code>.
     */
    public BlockHeaderRecord setOmmersHash(String value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>public.block_header.ommers_hash</code>.
     */
    public String getOmmersHash() {
        return (String) get(16);
    }

    /**
     * Setter for <code>public.block_header.logs_bloom</code>.
     */
    public BlockHeaderRecord setLogsBloom(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>public.block_header.logs_bloom</code>.
     */
    public String getLogsBloom() {
        return (String) get(17);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record18 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row18<String, Long, String, Long, Boolean, String, String, String, String, BigDecimal, BigDecimal, byte[], Long, Long, Timestamp, String, String, String> fieldsRow() {
        return (Row18) super.fieldsRow();
    }

    @Override
    public Row18<String, Long, String, Long, Boolean, String, String, String, String, BigDecimal, BigDecimal, byte[], Long, Long, Timestamp, String, String, String> valuesRow() {
        return (Row18) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return BlockHeader.BLOCK_HEADER.HASH;
    }

    @Override
    public Field<Long> field2() {
        return BlockHeader.BLOCK_HEADER.NUMBER;
    }

    @Override
    public Field<String> field3() {
        return BlockHeader.BLOCK_HEADER.PARENT_HASH;
    }

    @Override
    public Field<Long> field4() {
        return BlockHeader.BLOCK_HEADER.NONCE;
    }

    @Override
    public Field<Boolean> field5() {
        return BlockHeader.BLOCK_HEADER.IS_CANONICAL;
    }

    @Override
    public Field<String> field6() {
        return BlockHeader.BLOCK_HEADER.STATE_ROOT;
    }

    @Override
    public Field<String> field7() {
        return BlockHeader.BLOCK_HEADER.RECEIPTS_ROOT;
    }

    @Override
    public Field<String> field8() {
        return BlockHeader.BLOCK_HEADER.TRANSACTIONS_ROOT;
    }

    @Override
    public Field<String> field9() {
        return BlockHeader.BLOCK_HEADER.COINBASE;
    }

    @Override
    public Field<BigDecimal> field10() {
        return BlockHeader.BLOCK_HEADER.DIFFICULTY;
    }

    @Override
    public Field<BigDecimal> field11() {
        return BlockHeader.BLOCK_HEADER.TOTAL_DIFFICULTY;
    }

    @Override
    public Field<byte[]> field12() {
        return BlockHeader.BLOCK_HEADER.EXTRA_DATA;
    }

    @Override
    public Field<Long> field13() {
        return BlockHeader.BLOCK_HEADER.GAS_LIMIT;
    }

    @Override
    public Field<Long> field14() {
        return BlockHeader.BLOCK_HEADER.GAS_USED;
    }

    @Override
    public Field<Timestamp> field15() {
        return BlockHeader.BLOCK_HEADER.TIMESTAMP;
    }

    @Override
    public Field<String> field16() {
        return BlockHeader.BLOCK_HEADER.MIX_HASH;
    }

    @Override
    public Field<String> field17() {
        return BlockHeader.BLOCK_HEADER.OMMERS_HASH;
    }

    @Override
    public Field<String> field18() {
        return BlockHeader.BLOCK_HEADER.LOGS_BLOOM;
    }

    @Override
    public String component1() {
        return getHash();
    }

    @Override
    public Long component2() {
        return getNumber();
    }

    @Override
    public String component3() {
        return getParentHash();
    }

    @Override
    public Long component4() {
        return getNonce();
    }

    @Override
    public Boolean component5() {
        return getIsCanonical();
    }

    @Override
    public String component6() {
        return getStateRoot();
    }

    @Override
    public String component7() {
        return getReceiptsRoot();
    }

    @Override
    public String component8() {
        return getTransactionsRoot();
    }

    @Override
    public String component9() {
        return getCoinbase();
    }

    @Override
    public BigDecimal component10() {
        return getDifficulty();
    }

    @Override
    public BigDecimal component11() {
        return getTotalDifficulty();
    }

    @Override
    public byte[] component12() {
        return getExtraData();
    }

    @Override
    public Long component13() {
        return getGasLimit();
    }

    @Override
    public Long component14() {
        return getGasUsed();
    }

    @Override
    public Timestamp component15() {
        return getTimestamp();
    }

    @Override
    public String component16() {
        return getMixHash();
    }

    @Override
    public String component17() {
        return getOmmersHash();
    }

    @Override
    public String component18() {
        return getLogsBloom();
    }

    @Override
    public String value1() {
        return getHash();
    }

    @Override
    public Long value2() {
        return getNumber();
    }

    @Override
    public String value3() {
        return getParentHash();
    }

    @Override
    public Long value4() {
        return getNonce();
    }

    @Override
    public Boolean value5() {
        return getIsCanonical();
    }

    @Override
    public String value6() {
        return getStateRoot();
    }

    @Override
    public String value7() {
        return getReceiptsRoot();
    }

    @Override
    public String value8() {
        return getTransactionsRoot();
    }

    @Override
    public String value9() {
        return getCoinbase();
    }

    @Override
    public BigDecimal value10() {
        return getDifficulty();
    }

    @Override
    public BigDecimal value11() {
        return getTotalDifficulty();
    }

    @Override
    public byte[] value12() {
        return getExtraData();
    }

    @Override
    public Long value13() {
        return getGasLimit();
    }

    @Override
    public Long value14() {
        return getGasUsed();
    }

    @Override
    public Timestamp value15() {
        return getTimestamp();
    }

    @Override
    public String value16() {
        return getMixHash();
    }

    @Override
    public String value17() {
        return getOmmersHash();
    }

    @Override
    public String value18() {
        return getLogsBloom();
    }

    @Override
    public BlockHeaderRecord value1(String value) {
        setHash(value);
        return this;
    }

    @Override
    public BlockHeaderRecord value2(Long value) {
        setNumber(value);
        return this;
    }

    @Override
    public BlockHeaderRecord value3(String value) {
        setParentHash(value);
        return this;
    }

    @Override
    public BlockHeaderRecord value4(Long value) {
        setNonce(value);
        return this;
    }

    @Override
    public BlockHeaderRecord value5(Boolean value) {
        setIsCanonical(value);
        return this;
    }

    @Override
    public BlockHeaderRecord value6(String value) {
        setStateRoot(value);
        return this;
    }

    @Override
    public BlockHeaderRecord value7(String value) {
        setReceiptsRoot(value);
        return this;
    }

    @Override
    public BlockHeaderRecord value8(String value) {
        setTransactionsRoot(value);
        return this;
    }

    @Override
    public BlockHeaderRecord value9(String value) {
        setCoinbase(value);
        return this;
    }

    @Override
    public BlockHeaderRecord value10(BigDecimal value) {
        setDifficulty(value);
        return this;
    }

    @Override
    public BlockHeaderRecord value11(BigDecimal value) {
        setTotalDifficulty(value);
        return this;
    }

    @Override
    public BlockHeaderRecord value12(byte... value) {
        setExtraData(value);
        return this;
    }

    @Override
    public BlockHeaderRecord value13(Long value) {
        setGasLimit(value);
        return this;
    }

    @Override
    public BlockHeaderRecord value14(Long value) {
        setGasUsed(value);
        return this;
    }

    @Override
    public BlockHeaderRecord value15(Timestamp value) {
        setTimestamp(value);
        return this;
    }

    @Override
    public BlockHeaderRecord value16(String value) {
        setMixHash(value);
        return this;
    }

    @Override
    public BlockHeaderRecord value17(String value) {
        setOmmersHash(value);
        return this;
    }

    @Override
    public BlockHeaderRecord value18(String value) {
        setLogsBloom(value);
        return this;
    }

    @Override
    public BlockHeaderRecord values(String value1, Long value2, String value3, Long value4, Boolean value5, String value6, String value7, String value8, String value9, BigDecimal value10, BigDecimal value11, byte[] value12, Long value13, Long value14, Timestamp value15, String value16, String value17, String value18) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BlockHeaderRecord
     */
    public BlockHeaderRecord() {
        super(BlockHeader.BLOCK_HEADER);
    }

    /**
     * Create a detached, initialised BlockHeaderRecord
     */
    public BlockHeaderRecord(String hash, Long number, String parentHash, Long nonce, Boolean isCanonical, String stateRoot, String receiptsRoot, String transactionsRoot, String coinbase, BigDecimal difficulty, BigDecimal totalDifficulty, byte[] extraData, Long gasLimit, Long gasUsed, Timestamp timestamp, String mixHash, String ommersHash, String logsBloom) {
        super(BlockHeader.BLOCK_HEADER);

        set(0, hash);
        set(1, number);
        set(2, parentHash);
        set(3, nonce);
        set(4, isCanonical);
        set(5, stateRoot);
        set(6, receiptsRoot);
        set(7, transactionsRoot);
        set(8, coinbase);
        set(9, difficulty);
        set(10, totalDifficulty);
        set(11, extraData);
        set(12, gasLimit);
        set(13, gasUsed);
        set(14, timestamp);
        set(15, mixHash);
        set(16, ommersHash);
        set(17, logsBloom);
    }
}
