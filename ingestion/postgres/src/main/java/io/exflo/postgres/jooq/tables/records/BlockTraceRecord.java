/*
 * This file is generated by jOOQ.
 */
package io.exflo.postgres.jooq.tables.records;


import io.exflo.postgres.jooq.tables.BlockTrace;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BlockTraceRecord extends TableRecordImpl<BlockTraceRecord> implements Record2<String, JSONB> {

    private static final long serialVersionUID = 708719389;

    /**
     * Setter for <code>public.block_trace.block_hash</code>.
     */
    public BlockTraceRecord setBlockHash(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.block_trace.block_hash</code>.
     */
    public String getBlockHash() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.block_trace.trace</code>.
     */
    public BlockTraceRecord setTrace(JSONB value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.block_trace.trace</code>.
     */
    public JSONB getTrace() {
        return (JSONB) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, JSONB> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, JSONB> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return BlockTrace.BLOCK_TRACE.BLOCK_HASH;
    }

    @Override
    public Field<JSONB> field2() {
        return BlockTrace.BLOCK_TRACE.TRACE;
    }

    @Override
    public String component1() {
        return getBlockHash();
    }

    @Override
    public JSONB component2() {
        return getTrace();
    }

    @Override
    public String value1() {
        return getBlockHash();
    }

    @Override
    public JSONB value2() {
        return getTrace();
    }

    @Override
    public BlockTraceRecord value1(String value) {
        setBlockHash(value);
        return this;
    }

    @Override
    public BlockTraceRecord value2(JSONB value) {
        setTrace(value);
        return this;
    }

    @Override
    public BlockTraceRecord values(String value1, JSONB value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BlockTraceRecord
     */
    public BlockTraceRecord() {
        super(BlockTrace.BLOCK_TRACE);
    }

    /**
     * Create a detached, initialised BlockTraceRecord
     */
    public BlockTraceRecord(String blockHash, JSONB trace) {
        super(BlockTrace.BLOCK_TRACE);

        set(0, blockHash);
        set(1, trace);
    }
}
