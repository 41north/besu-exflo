/*
 * This file is generated by jOOQ.
 */
package io.exflo.postgres.jooq.tables;


import io.exflo.postgres.jooq.Indexes;
import io.exflo.postgres.jooq.Keys;
import io.exflo.postgres.jooq.Public;
import io.exflo.postgres.jooq.enums.ContractCapability;
import io.exflo.postgres.jooq.enums.ContractType;
import io.exflo.postgres.jooq.tables.records.ContractCreatedRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContractCreated extends TableImpl<ContractCreatedRecord> {

    private static final long serialVersionUID = 413918822;

    /**
     * The reference instance of <code>public.contract_created</code>
     */
    public static final ContractCreated CONTRACT_CREATED = new ContractCreated();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContractCreatedRecord> getRecordType() {
        return ContractCreatedRecord.class;
    }

    /**
     * The column <code>public.contract_created.address</code>.
     */
    public final TableField<ContractCreatedRecord, String> ADDRESS = createField(DSL.name("address"), org.jooq.impl.SQLDataType.CHAR(42).nullable(false), this, "");

    /**
     * The column <code>public.contract_created.creator</code>.
     */
    public final TableField<ContractCreatedRecord, String> CREATOR = createField(DSL.name("creator"), org.jooq.impl.SQLDataType.CHAR(42).nullable(false), this, "");

    /**
     * The column <code>public.contract_created.code</code>.
     */
    public final TableField<ContractCreatedRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.contract_created.type</code>.
     */
    public final TableField<ContractCreatedRecord, ContractType> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR.asEnumDataType(io.exflo.postgres.jooq.enums.ContractType.class), this, "");

    /**
     * The column <code>public.contract_created.capabilities</code>.
     */
    public final TableField<ContractCreatedRecord, ContractCapability[]> CAPABILITIES = createField(DSL.name("capabilities"), org.jooq.impl.SQLDataType.VARCHAR.asEnumDataType(io.exflo.postgres.jooq.enums.ContractCapability.class).getArrayDataType(), this, "");

    /**
     * The column <code>public.contract_created.name</code>.
     */
    public final TableField<ContractCreatedRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>public.contract_created.symbol</code>.
     */
    public final TableField<ContractCreatedRecord, String> SYMBOL = createField(DSL.name("symbol"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>public.contract_created.decimals</code>.
     */
    public final TableField<ContractCreatedRecord, Short> DECIMALS = createField(DSL.name("decimals"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.contract_created.total_supply</code>.
     */
    public final TableField<ContractCreatedRecord, BigDecimal> TOTAL_SUPPLY = createField(DSL.name("total_supply"), org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.contract_created.granularity</code>.
     */
    public final TableField<ContractCreatedRecord, BigDecimal> GRANULARITY = createField(DSL.name("granularity"), org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.contract_created.cap</code>.
     */
    public final TableField<ContractCreatedRecord, BigDecimal> CAP = createField(DSL.name("cap"), org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.contract_created.block_hash</code>.
     */
    public final TableField<ContractCreatedRecord, String> BLOCK_HASH = createField(DSL.name("block_hash"), org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.contract_created.block_number</code>.
     */
    public final TableField<ContractCreatedRecord, Long> BLOCK_NUMBER = createField(DSL.name("block_number"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.contract_created.transaction_hash</code>.
     */
    public final TableField<ContractCreatedRecord, String> TRANSACTION_HASH = createField(DSL.name("transaction_hash"), org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.contract_created.timestamp</code>.
     */
    public final TableField<ContractCreatedRecord, Timestamp> TIMESTAMP = createField(DSL.name("timestamp"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>public.contract_created</code> table reference
     */
    public ContractCreated() {
        this(DSL.name("contract_created"), null);
    }

    /**
     * Create an aliased <code>public.contract_created</code> table reference
     */
    public ContractCreated(String alias) {
        this(DSL.name(alias), CONTRACT_CREATED);
    }

    /**
     * Create an aliased <code>public.contract_created</code> table reference
     */
    public ContractCreated(Name alias) {
        this(alias, CONTRACT_CREATED);
    }

    private ContractCreated(Name alias, Table<ContractCreatedRecord> aliased) {
        this(alias, aliased, null);
    }

    private ContractCreated(Name alias, Table<ContractCreatedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ContractCreated(Table<O> child, ForeignKey<O, ContractCreatedRecord> key) {
        super(child, key, CONTRACT_CREATED);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONTRACT_CREATED_PKEY, Indexes.IDX_CONTRACT_CREATED__ADDRESS, Indexes.IDX_CONTRACT_CREATED__BLOCK_NUMBER_DESC);
    }

    @Override
    public UniqueKey<ContractCreatedRecord> getPrimaryKey() {
        return Keys.CONTRACT_CREATED_PKEY;
    }

    @Override
    public List<UniqueKey<ContractCreatedRecord>> getKeys() {
        return Arrays.<UniqueKey<ContractCreatedRecord>>asList(Keys.CONTRACT_CREATED_PKEY);
    }

    @Override
    public List<ForeignKey<ContractCreatedRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ContractCreatedRecord, ?>>asList(Keys.CONTRACT_CREATED__CONTRACT_CREATED_BLOCK_HASH_FKEY, Keys.CONTRACT_CREATED__CONTRACT_CREATED_TRANSACTION_HASH_FKEY);
    }

    public BlockHeader blockHeader() {
        return new BlockHeader(this, Keys.CONTRACT_CREATED__CONTRACT_CREATED_BLOCK_HASH_FKEY);
    }

    public Transaction transaction() {
        return new Transaction(this, Keys.CONTRACT_CREATED__CONTRACT_CREATED_TRANSACTION_HASH_FKEY);
    }

    @Override
    public ContractCreated as(String alias) {
        return new ContractCreated(DSL.name(alias), this);
    }

    @Override
    public ContractCreated as(Name alias) {
        return new ContractCreated(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ContractCreated rename(String name) {
        return new ContractCreated(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ContractCreated rename(Name name) {
        return new ContractCreated(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<String, String, String, ContractType, ContractCapability[], String, String, Short, BigDecimal, BigDecimal, BigDecimal, String, Long, String, Timestamp> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
