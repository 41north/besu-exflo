/*
 * This file is generated by jOOQ.
 */
package io.exflo.postgres.jooq.tables.records;


import io.exflo.postgres.jooq.enums.DeltaType;
import io.exflo.postgres.jooq.tables.InternalTransaction;

import java.math.BigDecimal;
import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InternalTransactionRecord extends TableRecordImpl<InternalTransactionRecord> implements Record10<Long, DeltaType, String, String, BigDecimal, Long, String, Timestamp, String, Integer> {

    private static final long serialVersionUID = 1801092465;

    /**
     * Setter for <code>public.internal_transaction.id</code>.
     */
    public InternalTransactionRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.internal_transaction.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.internal_transaction.delta_type</code>.
     */
    public InternalTransactionRecord setDeltaType(DeltaType value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.internal_transaction.delta_type</code>.
     */
    public DeltaType getDeltaType() {
        return (DeltaType) get(1);
    }

    /**
     * Setter for <code>public.internal_transaction.from</code>.
     */
    public InternalTransactionRecord setFrom(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.internal_transaction.from</code>.
     */
    public String getFrom() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.internal_transaction.to</code>.
     */
    public InternalTransactionRecord setTo(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.internal_transaction.to</code>.
     */
    public String getTo() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.internal_transaction.amount</code>.
     */
    public InternalTransactionRecord setAmount(BigDecimal value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.internal_transaction.amount</code>.
     */
    public BigDecimal getAmount() {
        return (BigDecimal) get(4);
    }

    /**
     * Setter for <code>public.internal_transaction.block_number</code>.
     */
    public InternalTransactionRecord setBlockNumber(Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.internal_transaction.block_number</code>.
     */
    public Long getBlockNumber() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>public.internal_transaction.block_hash</code>.
     */
    public InternalTransactionRecord setBlockHash(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.internal_transaction.block_hash</code>.
     */
    public String getBlockHash() {
        return (String) get(6);
    }

    /**
     * Setter for <code>public.internal_transaction.block_timestamp</code>.
     */
    public InternalTransactionRecord setBlockTimestamp(Timestamp value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.internal_transaction.block_timestamp</code>.
     */
    public Timestamp getBlockTimestamp() {
        return (Timestamp) get(7);
    }

    /**
     * Setter for <code>public.internal_transaction.transaction_hash</code>.
     */
    public InternalTransactionRecord setTransactionHash(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.internal_transaction.transaction_hash</code>.
     */
    public String getTransactionHash() {
        return (String) get(8);
    }

    /**
     * Setter for <code>public.internal_transaction.transaction_index</code>.
     */
    public InternalTransactionRecord setTransactionIndex(Integer value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>public.internal_transaction.transaction_index</code>.
     */
    public Integer getTransactionIndex() {
        return (Integer) get(9);
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, DeltaType, String, String, BigDecimal, Long, String, Timestamp, String, Integer> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<Long, DeltaType, String, String, BigDecimal, Long, String, Timestamp, String, Integer> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return InternalTransaction.INTERNAL_TRANSACTION.ID;
    }

    @Override
    public Field<DeltaType> field2() {
        return InternalTransaction.INTERNAL_TRANSACTION.DELTA_TYPE;
    }

    @Override
    public Field<String> field3() {
        return InternalTransaction.INTERNAL_TRANSACTION.FROM;
    }

    @Override
    public Field<String> field4() {
        return InternalTransaction.INTERNAL_TRANSACTION.TO;
    }

    @Override
    public Field<BigDecimal> field5() {
        return InternalTransaction.INTERNAL_TRANSACTION.AMOUNT;
    }

    @Override
    public Field<Long> field6() {
        return InternalTransaction.INTERNAL_TRANSACTION.BLOCK_NUMBER;
    }

    @Override
    public Field<String> field7() {
        return InternalTransaction.INTERNAL_TRANSACTION.BLOCK_HASH;
    }

    @Override
    public Field<Timestamp> field8() {
        return InternalTransaction.INTERNAL_TRANSACTION.BLOCK_TIMESTAMP;
    }

    @Override
    public Field<String> field9() {
        return InternalTransaction.INTERNAL_TRANSACTION.TRANSACTION_HASH;
    }

    @Override
    public Field<Integer> field10() {
        return InternalTransaction.INTERNAL_TRANSACTION.TRANSACTION_INDEX;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public DeltaType component2() {
        return getDeltaType();
    }

    @Override
    public String component3() {
        return getFrom();
    }

    @Override
    public String component4() {
        return getTo();
    }

    @Override
    public BigDecimal component5() {
        return getAmount();
    }

    @Override
    public Long component6() {
        return getBlockNumber();
    }

    @Override
    public String component7() {
        return getBlockHash();
    }

    @Override
    public Timestamp component8() {
        return getBlockTimestamp();
    }

    @Override
    public String component9() {
        return getTransactionHash();
    }

    @Override
    public Integer component10() {
        return getTransactionIndex();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public DeltaType value2() {
        return getDeltaType();
    }

    @Override
    public String value3() {
        return getFrom();
    }

    @Override
    public String value4() {
        return getTo();
    }

    @Override
    public BigDecimal value5() {
        return getAmount();
    }

    @Override
    public Long value6() {
        return getBlockNumber();
    }

    @Override
    public String value7() {
        return getBlockHash();
    }

    @Override
    public Timestamp value8() {
        return getBlockTimestamp();
    }

    @Override
    public String value9() {
        return getTransactionHash();
    }

    @Override
    public Integer value10() {
        return getTransactionIndex();
    }

    @Override
    public InternalTransactionRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public InternalTransactionRecord value2(DeltaType value) {
        setDeltaType(value);
        return this;
    }

    @Override
    public InternalTransactionRecord value3(String value) {
        setFrom(value);
        return this;
    }

    @Override
    public InternalTransactionRecord value4(String value) {
        setTo(value);
        return this;
    }

    @Override
    public InternalTransactionRecord value5(BigDecimal value) {
        setAmount(value);
        return this;
    }

    @Override
    public InternalTransactionRecord value6(Long value) {
        setBlockNumber(value);
        return this;
    }

    @Override
    public InternalTransactionRecord value7(String value) {
        setBlockHash(value);
        return this;
    }

    @Override
    public InternalTransactionRecord value8(Timestamp value) {
        setBlockTimestamp(value);
        return this;
    }

    @Override
    public InternalTransactionRecord value9(String value) {
        setTransactionHash(value);
        return this;
    }

    @Override
    public InternalTransactionRecord value10(Integer value) {
        setTransactionIndex(value);
        return this;
    }

    @Override
    public InternalTransactionRecord values(Long value1, DeltaType value2, String value3, String value4, BigDecimal value5, Long value6, String value7, Timestamp value8, String value9, Integer value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached InternalTransactionRecord
     */
    public InternalTransactionRecord() {
        super(InternalTransaction.INTERNAL_TRANSACTION);
    }

    /**
     * Create a detached, initialised InternalTransactionRecord
     */
    public InternalTransactionRecord(Long id, DeltaType deltaType, String from, String to, BigDecimal amount, Long blockNumber, String blockHash, Timestamp blockTimestamp, String transactionHash, Integer transactionIndex) {
        super(InternalTransaction.INTERNAL_TRANSACTION);

        set(0, id);
        set(1, deltaType);
        set(2, from);
        set(3, to);
        set(4, amount);
        set(5, blockNumber);
        set(6, blockHash);
        set(7, blockTimestamp);
        set(8, transactionHash);
        set(9, transactionIndex);
    }
}
