/*
 * This file is generated by jOOQ.
 */
package io.exflo.postgres.jooq.tables;


import io.exflo.postgres.jooq.Indexes;
import io.exflo.postgres.jooq.Keys;
import io.exflo.postgres.jooq.Public;
import io.exflo.postgres.jooq.tables.records.BlockHeaderRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BlockHeader extends TableImpl<BlockHeaderRecord> {

    private static final long serialVersionUID = -645563623;

    /**
     * The reference instance of <code>public.block_header</code>
     */
    public static final BlockHeader BLOCK_HEADER = new BlockHeader();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BlockHeaderRecord> getRecordType() {
        return BlockHeaderRecord.class;
    }

    /**
     * The column <code>public.block_header.hash</code>.
     */
    public final TableField<BlockHeaderRecord, String> HASH = createField(DSL.name("hash"), org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.block_header.number</code>.
     */
    public final TableField<BlockHeaderRecord, Long> NUMBER = createField(DSL.name("number"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.block_header.parent_hash</code>.
     */
    public final TableField<BlockHeaderRecord, String> PARENT_HASH = createField(DSL.name("parent_hash"), org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.block_header.nonce</code>.
     */
    public final TableField<BlockHeaderRecord, Long> NONCE = createField(DSL.name("nonce"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.block_header.is_canonical</code>.
     */
    public final TableField<BlockHeaderRecord, Boolean> IS_CANONICAL = createField(DSL.name("is_canonical"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.block_header.state_root</code>.
     */
    public final TableField<BlockHeaderRecord, String> STATE_ROOT = createField(DSL.name("state_root"), org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.block_header.receipts_root</code>.
     */
    public final TableField<BlockHeaderRecord, String> RECEIPTS_ROOT = createField(DSL.name("receipts_root"), org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.block_header.transactions_root</code>.
     */
    public final TableField<BlockHeaderRecord, String> TRANSACTIONS_ROOT = createField(DSL.name("transactions_root"), org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.block_header.coinbase</code>.
     */
    public final TableField<BlockHeaderRecord, String> COINBASE = createField(DSL.name("coinbase"), org.jooq.impl.SQLDataType.CHAR(42).nullable(false), this, "");

    /**
     * The column <code>public.block_header.difficulty</code>.
     */
    public final TableField<BlockHeaderRecord, BigDecimal> DIFFICULTY = createField(DSL.name("difficulty"), org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.block_header.total_difficulty</code>.
     */
    public final TableField<BlockHeaderRecord, BigDecimal> TOTAL_DIFFICULTY = createField(DSL.name("total_difficulty"), org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.block_header.extra_data</code>.
     */
    public final TableField<BlockHeaderRecord, byte[]> EXTRA_DATA = createField(DSL.name("extra_data"), org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>public.block_header.gas_limit</code>.
     */
    public final TableField<BlockHeaderRecord, Long> GAS_LIMIT = createField(DSL.name("gas_limit"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.block_header.gas_used</code>.
     */
    public final TableField<BlockHeaderRecord, Long> GAS_USED = createField(DSL.name("gas_used"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.block_header.timestamp</code>.
     */
    public final TableField<BlockHeaderRecord, Timestamp> TIMESTAMP = createField(DSL.name("timestamp"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.block_header.mix_hash</code>.
     */
    public final TableField<BlockHeaderRecord, String> MIX_HASH = createField(DSL.name("mix_hash"), org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.block_header.ommers_hash</code>.
     */
    public final TableField<BlockHeaderRecord, String> OMMERS_HASH = createField(DSL.name("ommers_hash"), org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.block_header.logs_bloom</code>.
     */
    public final TableField<BlockHeaderRecord, String> LOGS_BLOOM = createField(DSL.name("logs_bloom"), org.jooq.impl.SQLDataType.CHAR(514).nullable(false), this, "");

    /**
     * Create a <code>public.block_header</code> table reference
     */
    public BlockHeader() {
        this(DSL.name("block_header"), null);
    }

    /**
     * Create an aliased <code>public.block_header</code> table reference
     */
    public BlockHeader(String alias) {
        this(DSL.name(alias), BLOCK_HEADER);
    }

    /**
     * Create an aliased <code>public.block_header</code> table reference
     */
    public BlockHeader(Name alias) {
        this(alias, BLOCK_HEADER);
    }

    private BlockHeader(Name alias, Table<BlockHeaderRecord> aliased) {
        this(alias, aliased, null);
    }

    private BlockHeader(Name alias, Table<BlockHeaderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> BlockHeader(Table<O> child, ForeignKey<O, BlockHeaderRecord> key) {
        super(child, key, BLOCK_HEADER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BLOCK_HEADER_PKEY, Indexes.IDX_BLOCK_HEADER__NUMBER_DESC);
    }

    @Override
    public UniqueKey<BlockHeaderRecord> getPrimaryKey() {
        return Keys.BLOCK_HEADER_PKEY;
    }

    @Override
    public List<UniqueKey<BlockHeaderRecord>> getKeys() {
        return Arrays.<UniqueKey<BlockHeaderRecord>>asList(Keys.BLOCK_HEADER_PKEY);
    }

    @Override
    public List<ForeignKey<BlockHeaderRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BlockHeaderRecord, ?>>asList(Keys.BLOCK_HEADER__BLOCK_HEADER_HASH_FKEY);
    }

    public ImportQueue importQueue() {
        return new ImportQueue(this, Keys.BLOCK_HEADER__BLOCK_HEADER_HASH_FKEY);
    }

    @Override
    public BlockHeader as(String alias) {
        return new BlockHeader(DSL.name(alias), this);
    }

    @Override
    public BlockHeader as(Name alias) {
        return new BlockHeader(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BlockHeader rename(String name) {
        return new BlockHeader(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BlockHeader rename(Name name) {
        return new BlockHeader(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<String, Long, String, Long, Boolean, String, String, String, String, BigDecimal, BigDecimal, byte[], Long, Long, Timestamp, String, String, String> fieldsRow() {
        return (Row18) super.fieldsRow();
    }
}
