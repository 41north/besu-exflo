/*
 * This file is generated by jOOQ.
 */
package io.exflo.postgres.jooq.tables.records;


import io.exflo.postgres.jooq.tables.Account;

import java.math.BigDecimal;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountRecord extends UpdatableRecordImpl<AccountRecord> implements Record5<String, String, Long, Long, BigDecimal> {

    private static final long serialVersionUID = -1836515340;

    /**
     * Setter for <code>public.account.address</code>.
     */
    public AccountRecord setAddress(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.account.address</code>.
     */
    public String getAddress() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.account.block_hash</code>.
     */
    public AccountRecord setBlockHash(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.account.block_hash</code>.
     */
    public String getBlockHash() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.account.block_number</code>.
     */
    public AccountRecord setBlockNumber(Long value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.account.block_number</code>.
     */
    public Long getBlockNumber() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>public.account.nonce</code>.
     */
    public AccountRecord setNonce(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.account.nonce</code>.
     */
    public Long getNonce() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>public.account.balance</code>.
     */
    public AccountRecord setBalance(BigDecimal value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.account.balance</code>.
     */
    public BigDecimal getBalance() {
        return (BigDecimal) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, Long, Long, BigDecimal> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<String, String, Long, Long, BigDecimal> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Account.ACCOUNT.ADDRESS;
    }

    @Override
    public Field<String> field2() {
        return Account.ACCOUNT.BLOCK_HASH;
    }

    @Override
    public Field<Long> field3() {
        return Account.ACCOUNT.BLOCK_NUMBER;
    }

    @Override
    public Field<Long> field4() {
        return Account.ACCOUNT.NONCE;
    }

    @Override
    public Field<BigDecimal> field5() {
        return Account.ACCOUNT.BALANCE;
    }

    @Override
    public String component1() {
        return getAddress();
    }

    @Override
    public String component2() {
        return getBlockHash();
    }

    @Override
    public Long component3() {
        return getBlockNumber();
    }

    @Override
    public Long component4() {
        return getNonce();
    }

    @Override
    public BigDecimal component5() {
        return getBalance();
    }

    @Override
    public String value1() {
        return getAddress();
    }

    @Override
    public String value2() {
        return getBlockHash();
    }

    @Override
    public Long value3() {
        return getBlockNumber();
    }

    @Override
    public Long value4() {
        return getNonce();
    }

    @Override
    public BigDecimal value5() {
        return getBalance();
    }

    @Override
    public AccountRecord value1(String value) {
        setAddress(value);
        return this;
    }

    @Override
    public AccountRecord value2(String value) {
        setBlockHash(value);
        return this;
    }

    @Override
    public AccountRecord value3(Long value) {
        setBlockNumber(value);
        return this;
    }

    @Override
    public AccountRecord value4(Long value) {
        setNonce(value);
        return this;
    }

    @Override
    public AccountRecord value5(BigDecimal value) {
        setBalance(value);
        return this;
    }

    @Override
    public AccountRecord values(String value1, String value2, Long value3, Long value4, BigDecimal value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountRecord
     */
    public AccountRecord() {
        super(Account.ACCOUNT);
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    public AccountRecord(String address, String blockHash, Long blockNumber, Long nonce, BigDecimal balance) {
        super(Account.ACCOUNT);

        set(0, address);
        set(1, blockHash);
        set(2, blockNumber);
        set(3, nonce);
        set(4, balance);
    }
}
