/*
 * This file is generated by jOOQ.
 */
package io.exflo.postgres.jooq.tables;


import io.exflo.postgres.jooq.Indexes;
import io.exflo.postgres.jooq.Keys;
import io.exflo.postgres.jooq.Public;
import io.exflo.postgres.jooq.tables.records.ImportQueueRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ImportQueue extends TableImpl<ImportQueueRecord> {

    private static final long serialVersionUID = -100158400;

    /**
     * The reference instance of <code>public.import_queue</code>
     */
    public static final ImportQueue IMPORT_QUEUE = new ImportQueue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImportQueueRecord> getRecordType() {
        return ImportQueueRecord.class;
    }

    /**
     * The column <code>public.import_queue.number</code>.
     */
    public final TableField<ImportQueueRecord, Long> NUMBER = createField(DSL.name("number"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.import_queue.hash</code>.
     */
    public final TableField<ImportQueueRecord, String> HASH = createField(DSL.name("hash"), org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.import_queue.stage</code>.
     */
    public final TableField<ImportQueueRecord, Short> STAGE = createField(DSL.name("stage"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.import_queue.timestamp</code>.
     */
    public final TableField<ImportQueueRecord, Timestamp> TIMESTAMP = createField(DSL.name("timestamp"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>public.import_queue</code> table reference
     */
    public ImportQueue() {
        this(DSL.name("import_queue"), null);
    }

    /**
     * Create an aliased <code>public.import_queue</code> table reference
     */
    public ImportQueue(String alias) {
        this(DSL.name(alias), IMPORT_QUEUE);
    }

    /**
     * Create an aliased <code>public.import_queue</code> table reference
     */
    public ImportQueue(Name alias) {
        this(alias, IMPORT_QUEUE);
    }

    private ImportQueue(Name alias, Table<ImportQueueRecord> aliased) {
        this(alias, aliased, null);
    }

    private ImportQueue(Name alias, Table<ImportQueueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ImportQueue(Table<O> child, ForeignKey<O, ImportQueueRecord> key) {
        super(child, key, IMPORT_QUEUE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_IMPORT_QUEUE__HASH, Indexes.IMPORT_QUEUE_HASH_KEY, Indexes.IMPORT_QUEUE_PKEY);
    }

    @Override
    public UniqueKey<ImportQueueRecord> getPrimaryKey() {
        return Keys.IMPORT_QUEUE_PKEY;
    }

    @Override
    public List<UniqueKey<ImportQueueRecord>> getKeys() {
        return Arrays.<UniqueKey<ImportQueueRecord>>asList(Keys.IMPORT_QUEUE_PKEY, Keys.IMPORT_QUEUE_HASH_KEY);
    }

    @Override
    public ImportQueue as(String alias) {
        return new ImportQueue(DSL.name(alias), this);
    }

    @Override
    public ImportQueue as(Name alias) {
        return new ImportQueue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ImportQueue rename(String name) {
        return new ImportQueue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ImportQueue rename(Name name) {
        return new ImportQueue(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, Short, Timestamp> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
