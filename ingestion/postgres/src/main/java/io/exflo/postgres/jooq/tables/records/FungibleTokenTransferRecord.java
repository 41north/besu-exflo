/*
 * This file is generated by jOOQ.
 */
package io.exflo.postgres.jooq.tables.records;


import io.exflo.postgres.jooq.tables.FungibleTokenTransfer;

import java.math.BigDecimal;
import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FungibleTokenTransferRecord extends TableRecordImpl<FungibleTokenTransferRecord> implements Record10<Long, String, String, String, BigDecimal, Long, String, Timestamp, String, Integer> {

    private static final long serialVersionUID = 1575569911;

    /**
     * Setter for <code>public.fungible_token_transfer.id</code>.
     */
    public FungibleTokenTransferRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.fungible_token_transfer.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.fungible_token_transfer.contract_address</code>.
     */
    public FungibleTokenTransferRecord setContractAddress(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.fungible_token_transfer.contract_address</code>.
     */
    public String getContractAddress() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.fungible_token_transfer.from</code>.
     */
    public FungibleTokenTransferRecord setFrom(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.fungible_token_transfer.from</code>.
     */
    public String getFrom() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.fungible_token_transfer.to</code>.
     */
    public FungibleTokenTransferRecord setTo(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.fungible_token_transfer.to</code>.
     */
    public String getTo() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.fungible_token_transfer.amount</code>.
     */
    public FungibleTokenTransferRecord setAmount(BigDecimal value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.fungible_token_transfer.amount</code>.
     */
    public BigDecimal getAmount() {
        return (BigDecimal) get(4);
    }

    /**
     * Setter for <code>public.fungible_token_transfer.block_number</code>.
     */
    public FungibleTokenTransferRecord setBlockNumber(Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.fungible_token_transfer.block_number</code>.
     */
    public Long getBlockNumber() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>public.fungible_token_transfer.block_hash</code>.
     */
    public FungibleTokenTransferRecord setBlockHash(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.fungible_token_transfer.block_hash</code>.
     */
    public String getBlockHash() {
        return (String) get(6);
    }

    /**
     * Setter for <code>public.fungible_token_transfer.block_timestamp</code>.
     */
    public FungibleTokenTransferRecord setBlockTimestamp(Timestamp value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.fungible_token_transfer.block_timestamp</code>.
     */
    public Timestamp getBlockTimestamp() {
        return (Timestamp) get(7);
    }

    /**
     * Setter for <code>public.fungible_token_transfer.transaction_hash</code>.
     */
    public FungibleTokenTransferRecord setTransactionHash(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.fungible_token_transfer.transaction_hash</code>.
     */
    public String getTransactionHash() {
        return (String) get(8);
    }

    /**
     * Setter for <code>public.fungible_token_transfer.transaction_index</code>.
     */
    public FungibleTokenTransferRecord setTransactionIndex(Integer value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>public.fungible_token_transfer.transaction_index</code>.
     */
    public Integer getTransactionIndex() {
        return (Integer) get(9);
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, String, String, String, BigDecimal, Long, String, Timestamp, String, Integer> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<Long, String, String, String, BigDecimal, Long, String, Timestamp, String, Integer> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return FungibleTokenTransfer.FUNGIBLE_TOKEN_TRANSFER.ID;
    }

    @Override
    public Field<String> field2() {
        return FungibleTokenTransfer.FUNGIBLE_TOKEN_TRANSFER.CONTRACT_ADDRESS;
    }

    @Override
    public Field<String> field3() {
        return FungibleTokenTransfer.FUNGIBLE_TOKEN_TRANSFER.FROM;
    }

    @Override
    public Field<String> field4() {
        return FungibleTokenTransfer.FUNGIBLE_TOKEN_TRANSFER.TO;
    }

    @Override
    public Field<BigDecimal> field5() {
        return FungibleTokenTransfer.FUNGIBLE_TOKEN_TRANSFER.AMOUNT;
    }

    @Override
    public Field<Long> field6() {
        return FungibleTokenTransfer.FUNGIBLE_TOKEN_TRANSFER.BLOCK_NUMBER;
    }

    @Override
    public Field<String> field7() {
        return FungibleTokenTransfer.FUNGIBLE_TOKEN_TRANSFER.BLOCK_HASH;
    }

    @Override
    public Field<Timestamp> field8() {
        return FungibleTokenTransfer.FUNGIBLE_TOKEN_TRANSFER.BLOCK_TIMESTAMP;
    }

    @Override
    public Field<String> field9() {
        return FungibleTokenTransfer.FUNGIBLE_TOKEN_TRANSFER.TRANSACTION_HASH;
    }

    @Override
    public Field<Integer> field10() {
        return FungibleTokenTransfer.FUNGIBLE_TOKEN_TRANSFER.TRANSACTION_INDEX;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getContractAddress();
    }

    @Override
    public String component3() {
        return getFrom();
    }

    @Override
    public String component4() {
        return getTo();
    }

    @Override
    public BigDecimal component5() {
        return getAmount();
    }

    @Override
    public Long component6() {
        return getBlockNumber();
    }

    @Override
    public String component7() {
        return getBlockHash();
    }

    @Override
    public Timestamp component8() {
        return getBlockTimestamp();
    }

    @Override
    public String component9() {
        return getTransactionHash();
    }

    @Override
    public Integer component10() {
        return getTransactionIndex();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getContractAddress();
    }

    @Override
    public String value3() {
        return getFrom();
    }

    @Override
    public String value4() {
        return getTo();
    }

    @Override
    public BigDecimal value5() {
        return getAmount();
    }

    @Override
    public Long value6() {
        return getBlockNumber();
    }

    @Override
    public String value7() {
        return getBlockHash();
    }

    @Override
    public Timestamp value8() {
        return getBlockTimestamp();
    }

    @Override
    public String value9() {
        return getTransactionHash();
    }

    @Override
    public Integer value10() {
        return getTransactionIndex();
    }

    @Override
    public FungibleTokenTransferRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public FungibleTokenTransferRecord value2(String value) {
        setContractAddress(value);
        return this;
    }

    @Override
    public FungibleTokenTransferRecord value3(String value) {
        setFrom(value);
        return this;
    }

    @Override
    public FungibleTokenTransferRecord value4(String value) {
        setTo(value);
        return this;
    }

    @Override
    public FungibleTokenTransferRecord value5(BigDecimal value) {
        setAmount(value);
        return this;
    }

    @Override
    public FungibleTokenTransferRecord value6(Long value) {
        setBlockNumber(value);
        return this;
    }

    @Override
    public FungibleTokenTransferRecord value7(String value) {
        setBlockHash(value);
        return this;
    }

    @Override
    public FungibleTokenTransferRecord value8(Timestamp value) {
        setBlockTimestamp(value);
        return this;
    }

    @Override
    public FungibleTokenTransferRecord value9(String value) {
        setTransactionHash(value);
        return this;
    }

    @Override
    public FungibleTokenTransferRecord value10(Integer value) {
        setTransactionIndex(value);
        return this;
    }

    @Override
    public FungibleTokenTransferRecord values(Long value1, String value2, String value3, String value4, BigDecimal value5, Long value6, String value7, Timestamp value8, String value9, Integer value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FungibleTokenTransferRecord
     */
    public FungibleTokenTransferRecord() {
        super(FungibleTokenTransfer.FUNGIBLE_TOKEN_TRANSFER);
    }

    /**
     * Create a detached, initialised FungibleTokenTransferRecord
     */
    public FungibleTokenTransferRecord(Long id, String contractAddress, String from, String to, BigDecimal amount, Long blockNumber, String blockHash, Timestamp blockTimestamp, String transactionHash, Integer transactionIndex) {
        super(FungibleTokenTransfer.FUNGIBLE_TOKEN_TRANSFER);

        set(0, id);
        set(1, contractAddress);
        set(2, from);
        set(3, to);
        set(4, amount);
        set(5, blockNumber);
        set(6, blockHash);
        set(7, blockTimestamp);
        set(8, transactionHash);
        set(9, transactionIndex);
    }
}
