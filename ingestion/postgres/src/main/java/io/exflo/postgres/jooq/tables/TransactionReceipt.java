/*
 * This file is generated by jOOQ.
 */
package io.exflo.postgres.jooq.tables;


import io.exflo.postgres.jooq.Indexes;
import io.exflo.postgres.jooq.Keys;
import io.exflo.postgres.jooq.Public;
import io.exflo.postgres.jooq.tables.records.TransactionReceiptRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransactionReceipt extends TableImpl<TransactionReceiptRecord> {

    private static final long serialVersionUID = 704671296;

    /**
     * The reference instance of <code>public.transaction_receipt</code>
     */
    public static final TransactionReceipt TRANSACTION_RECEIPT = new TransactionReceipt();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionReceiptRecord> getRecordType() {
        return TransactionReceiptRecord.class;
    }

    /**
     * The column <code>public.transaction_receipt.transaction_hash</code>.
     */
    public final TableField<TransactionReceiptRecord, String> TRANSACTION_HASH = createField(DSL.name("transaction_hash"), org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.transaction_receipt.transaction_index</code>.
     */
    public final TableField<TransactionReceiptRecord, Integer> TRANSACTION_INDEX = createField(DSL.name("transaction_index"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.transaction_receipt.block_hash</code>.
     */
    public final TableField<TransactionReceiptRecord, String> BLOCK_HASH = createField(DSL.name("block_hash"), org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.transaction_receipt.block_number</code>.
     */
    public final TableField<TransactionReceiptRecord, Long> BLOCK_NUMBER = createField(DSL.name("block_number"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.transaction_receipt.from</code>.
     */
    public final TableField<TransactionReceiptRecord, String> FROM = createField(DSL.name("from"), org.jooq.impl.SQLDataType.CHAR(42).nullable(false), this, "");

    /**
     * The column <code>public.transaction_receipt.to</code>.
     */
    public final TableField<TransactionReceiptRecord, String> TO = createField(DSL.name("to"), org.jooq.impl.SQLDataType.CHAR(42), this, "");

    /**
     * The column <code>public.transaction_receipt.contract_address</code>.
     */
    public final TableField<TransactionReceiptRecord, String> CONTRACT_ADDRESS = createField(DSL.name("contract_address"), org.jooq.impl.SQLDataType.CHAR(42), this, "");

    /**
     * The column <code>public.transaction_receipt.cumulative_gas_used</code>.
     */
    public final TableField<TransactionReceiptRecord, Long> CUMULATIVE_GAS_USED = createField(DSL.name("cumulative_gas_used"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.transaction_receipt.gas_used</code>.
     */
    public final TableField<TransactionReceiptRecord, Long> GAS_USED = createField(DSL.name("gas_used"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.transaction_receipt.logs</code>.
     */
    public final TableField<TransactionReceiptRecord, String> LOGS = createField(DSL.name("logs"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.transaction_receipt.state_root</code>.
     */
    public final TableField<TransactionReceiptRecord, String> STATE_ROOT = createField(DSL.name("state_root"), org.jooq.impl.SQLDataType.CHAR(66), this, "");

    /**
     * The column <code>public.transaction_receipt.status</code>.
     */
    public final TableField<TransactionReceiptRecord, Short> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.transaction_receipt.bloom_filter</code>.
     */
    public final TableField<TransactionReceiptRecord, String> BLOOM_FILTER = createField(DSL.name("bloom_filter"), org.jooq.impl.SQLDataType.CHAR(514).nullable(false), this, "");

    /**
     * The column <code>public.transaction_receipt.timestamp</code>.
     */
    public final TableField<TransactionReceiptRecord, Timestamp> TIMESTAMP = createField(DSL.name("timestamp"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.transaction_receipt.revert_reason</code>.
     */
    public final TableField<TransactionReceiptRecord, byte[]> REVERT_REASON = createField(DSL.name("revert_reason"), org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * Create a <code>public.transaction_receipt</code> table reference
     */
    public TransactionReceipt() {
        this(DSL.name("transaction_receipt"), null);
    }

    /**
     * Create an aliased <code>public.transaction_receipt</code> table reference
     */
    public TransactionReceipt(String alias) {
        this(DSL.name(alias), TRANSACTION_RECEIPT);
    }

    /**
     * Create an aliased <code>public.transaction_receipt</code> table reference
     */
    public TransactionReceipt(Name alias) {
        this(alias, TRANSACTION_RECEIPT);
    }

    private TransactionReceipt(Name alias, Table<TransactionReceiptRecord> aliased) {
        this(alias, aliased, null);
    }

    private TransactionReceipt(Name alias, Table<TransactionReceiptRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TransactionReceipt(Table<O> child, ForeignKey<O, TransactionReceiptRecord> key) {
        super(child, key, TRANSACTION_RECEIPT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_TRANSACTION_RECEIPT__NUMBER_DESC, Indexes.IDX_TRANSACTION_RECEIPT__TRANSACTION_HASH, Indexes.TRANSACTION_RECEIPT_PKEY);
    }

    @Override
    public UniqueKey<TransactionReceiptRecord> getPrimaryKey() {
        return Keys.TRANSACTION_RECEIPT_PKEY;
    }

    @Override
    public List<UniqueKey<TransactionReceiptRecord>> getKeys() {
        return Arrays.<UniqueKey<TransactionReceiptRecord>>asList(Keys.TRANSACTION_RECEIPT_PKEY);
    }

    @Override
    public List<ForeignKey<TransactionReceiptRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TransactionReceiptRecord, ?>>asList(Keys.TRANSACTION_RECEIPT__TRANSACTION_RECEIPT_BLOCK_HASH_FKEY);
    }

    public BlockHeader blockHeader() {
        return new BlockHeader(this, Keys.TRANSACTION_RECEIPT__TRANSACTION_RECEIPT_BLOCK_HASH_FKEY);
    }

    @Override
    public TransactionReceipt as(String alias) {
        return new TransactionReceipt(DSL.name(alias), this);
    }

    @Override
    public TransactionReceipt as(Name alias) {
        return new TransactionReceipt(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionReceipt rename(String name) {
        return new TransactionReceipt(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionReceipt rename(Name name) {
        return new TransactionReceipt(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<String, Integer, String, Long, String, String, String, Long, Long, String, String, Short, String, Timestamp, byte[]> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
