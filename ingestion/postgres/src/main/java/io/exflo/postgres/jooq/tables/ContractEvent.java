/*
 * This file is generated by jOOQ.
 */
package io.exflo.postgres.jooq.tables;


import io.exflo.postgres.jooq.Indexes;
import io.exflo.postgres.jooq.Keys;
import io.exflo.postgres.jooq.Public;
import io.exflo.postgres.jooq.enums.ContractEventType;
import io.exflo.postgres.jooq.tables.records.ContractEventRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row22;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContractEvent extends TableImpl<ContractEventRecord> {

    private static final long serialVersionUID = 1248701801;

    /**
     * The reference instance of <code>public.contract_event</code>
     */
    public static final ContractEvent CONTRACT_EVENT = new ContractEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContractEventRecord> getRecordType() {
        return ContractEventRecord.class;
    }

    /**
     * The column <code>public.contract_event.block_number</code>.
     */
    public final TableField<ContractEventRecord, Long> BLOCK_NUMBER = createField(DSL.name("block_number"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.contract_event.block_hash</code>.
     */
    public final TableField<ContractEventRecord, String> BLOCK_HASH = createField(DSL.name("block_hash"), org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.contract_event.transaction_hash</code>.
     */
    public final TableField<ContractEventRecord, String> TRANSACTION_HASH = createField(DSL.name("transaction_hash"), org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.contract_event.contract_address</code>.
     */
    public final TableField<ContractEventRecord, String> CONTRACT_ADDRESS = createField(DSL.name("contract_address"), org.jooq.impl.SQLDataType.CHAR(42).nullable(false), this, "");

    /**
     * The column <code>public.contract_event.type</code>.
     */
    public final TableField<ContractEventRecord, ContractEventType> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false).asEnumDataType(io.exflo.postgres.jooq.enums.ContractEventType.class), this, "");

    /**
     * The column <code>public.contract_event.owner_address</code>.
     */
    public final TableField<ContractEventRecord, String> OWNER_ADDRESS = createField(DSL.name("owner_address"), org.jooq.impl.SQLDataType.CHAR(42), this, "");

    /**
     * The column <code>public.contract_event.spender_address</code>.
     */
    public final TableField<ContractEventRecord, String> SPENDER_ADDRESS = createField(DSL.name("spender_address"), org.jooq.impl.SQLDataType.CHAR(42), this, "");

    /**
     * The column <code>public.contract_event.operator_address</code>.
     */
    public final TableField<ContractEventRecord, String> OPERATOR_ADDRESS = createField(DSL.name("operator_address"), org.jooq.impl.SQLDataType.CHAR(42), this, "");

    /**
     * The column <code>public.contract_event.holder_address</code>.
     */
    public final TableField<ContractEventRecord, String> HOLDER_ADDRESS = createField(DSL.name("holder_address"), org.jooq.impl.SQLDataType.CHAR(42), this, "");

    /**
     * The column <code>public.contract_event.approved_address</code>.
     */
    public final TableField<ContractEventRecord, String> APPROVED_ADDRESS = createField(DSL.name("approved_address"), org.jooq.impl.SQLDataType.CHAR(42), this, "");

    /**
     * The column <code>public.contract_event.from_address</code>.
     */
    public final TableField<ContractEventRecord, String> FROM_ADDRESS = createField(DSL.name("from_address"), org.jooq.impl.SQLDataType.CHAR(42), this, "");

    /**
     * The column <code>public.contract_event.to_address</code>.
     */
    public final TableField<ContractEventRecord, String> TO_ADDRESS = createField(DSL.name("to_address"), org.jooq.impl.SQLDataType.CHAR(42), this, "");

    /**
     * The column <code>public.contract_event.value</code>.
     */
    public final TableField<ContractEventRecord, BigDecimal> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.contract_event.amount</code>.
     */
    public final TableField<ContractEventRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.contract_event.token_id</code>.
     */
    public final TableField<ContractEventRecord, BigDecimal> TOKEN_ID = createField(DSL.name("token_id"), org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.contract_event.id</code>.
     */
    public final TableField<ContractEventRecord, BigDecimal> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.contract_event.ids</code>.
     */
    public final TableField<ContractEventRecord, BigDecimal[]> IDS = createField(DSL.name("ids"), org.jooq.impl.SQLDataType.NUMERIC.getArrayDataType(), this, "");

    /**
     * The column <code>public.contract_event.values</code>.
     */
    public final TableField<ContractEventRecord, BigDecimal[]> VALUES = createField(DSL.name("values"), org.jooq.impl.SQLDataType.NUMERIC.getArrayDataType(), this, "");

    /**
     * The column <code>public.contract_event.approved</code>.
     */
    public final TableField<ContractEventRecord, Boolean> APPROVED = createField(DSL.name("approved"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.contract_event.data</code>.
     */
    public final TableField<ContractEventRecord, byte[]> DATA = createField(DSL.name("data"), org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>public.contract_event.operator_data</code>.
     */
    public final TableField<ContractEventRecord, byte[]> OPERATOR_DATA = createField(DSL.name("operator_data"), org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>public.contract_event.value_str</code>.
     */
    public final TableField<ContractEventRecord, String> VALUE_STR = createField(DSL.name("value_str"), org.jooq.impl.SQLDataType.VARCHAR(2048), this, "");

    /**
     * Create a <code>public.contract_event</code> table reference
     */
    public ContractEvent() {
        this(DSL.name("contract_event"), null);
    }

    /**
     * Create an aliased <code>public.contract_event</code> table reference
     */
    public ContractEvent(String alias) {
        this(DSL.name(alias), CONTRACT_EVENT);
    }

    /**
     * Create an aliased <code>public.contract_event</code> table reference
     */
    public ContractEvent(Name alias) {
        this(alias, CONTRACT_EVENT);
    }

    private ContractEvent(Name alias, Table<ContractEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private ContractEvent(Name alias, Table<ContractEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ContractEvent(Table<O> child, ForeignKey<O, ContractEventRecord> key) {
        super(child, key, CONTRACT_EVENT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_CONTRACT_EVENT__BLOCK_NUMBER_DESC, Indexes.IDX_CONTRACT_EVENT__TRANSACTION_HASH, Indexes.IDX_EVENT_TYPE);
    }

    @Override
    public List<ForeignKey<ContractEventRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ContractEventRecord, ?>>asList(Keys.CONTRACT_EVENT__CONTRACT_EVENT_BLOCK_HASH_FKEY, Keys.CONTRACT_EVENT__CONTRACT_EVENT_TRANSACTION_HASH_FKEY);
    }

    public BlockHeader blockHeader() {
        return new BlockHeader(this, Keys.CONTRACT_EVENT__CONTRACT_EVENT_BLOCK_HASH_FKEY);
    }

    public Transaction transaction() {
        return new Transaction(this, Keys.CONTRACT_EVENT__CONTRACT_EVENT_TRANSACTION_HASH_FKEY);
    }

    @Override
    public ContractEvent as(String alias) {
        return new ContractEvent(DSL.name(alias), this);
    }

    @Override
    public ContractEvent as(Name alias) {
        return new ContractEvent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ContractEvent rename(String name) {
        return new ContractEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ContractEvent rename(Name name) {
        return new ContractEvent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row22 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row22<Long, String, String, String, ContractEventType, String, String, String, String, String, String, String, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal[], BigDecimal[], Boolean, byte[], byte[], String> fieldsRow() {
        return (Row22) super.fieldsRow();
    }
}
