/*
 * This file is generated by jOOQ.
 */
package io.exflo.postgres.jooq.tables;


import io.exflo.postgres.jooq.Indexes;
import io.exflo.postgres.jooq.Keys;
import io.exflo.postgres.jooq.Public;
import io.exflo.postgres.jooq.tables.records.OmmerRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ommer extends TableImpl<OmmerRecord> {

    private static final long serialVersionUID = -1256838570;

    /**
     * The reference instance of <code>public.ommer</code>
     */
    public static final Ommer OMMER = new Ommer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OmmerRecord> getRecordType() {
        return OmmerRecord.class;
    }

    /**
     * The column <code>public.ommer.hash</code>.
     */
    public final TableField<OmmerRecord, String> HASH = createField(DSL.name("hash"), org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.ommer.number</code>.
     */
    public final TableField<OmmerRecord, Long> NUMBER = createField(DSL.name("number"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ommer.nephew_hash</code>.
     */
    public final TableField<OmmerRecord, String> NEPHEW_HASH = createField(DSL.name("nephew_hash"), org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.ommer.height</code>.
     */
    public final TableField<OmmerRecord, Long> HEIGHT = createField(DSL.name("height"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ommer.parent_hash</code>.
     */
    public final TableField<OmmerRecord, String> PARENT_HASH = createField(DSL.name("parent_hash"), org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.ommer.index</code>.
     */
    public final TableField<OmmerRecord, Integer> INDEX = createField(DSL.name("index"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.ommer.nonce</code>.
     */
    public final TableField<OmmerRecord, Long> NONCE = createField(DSL.name("nonce"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.ommer.ommers_hash</code>.
     */
    public final TableField<OmmerRecord, String> OMMERS_HASH = createField(DSL.name("ommers_hash"), org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.ommer.state_root</code>.
     */
    public final TableField<OmmerRecord, String> STATE_ROOT = createField(DSL.name("state_root"), org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.ommer.receipts_root</code>.
     */
    public final TableField<OmmerRecord, String> RECEIPTS_ROOT = createField(DSL.name("receipts_root"), org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.ommer.transactions_root</code>.
     */
    public final TableField<OmmerRecord, String> TRANSACTIONS_ROOT = createField(DSL.name("transactions_root"), org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.ommer.coinbase</code>.
     */
    public final TableField<OmmerRecord, String> COINBASE = createField(DSL.name("coinbase"), org.jooq.impl.SQLDataType.CHAR(42).nullable(false), this, "");

    /**
     * The column <code>public.ommer.difficulty</code>.
     */
    public final TableField<OmmerRecord, BigDecimal> DIFFICULTY = createField(DSL.name("difficulty"), org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.ommer.extra_data</code>.
     */
    public final TableField<OmmerRecord, byte[]> EXTRA_DATA = createField(DSL.name("extra_data"), org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>public.ommer.gas_limit</code>.
     */
    public final TableField<OmmerRecord, Long> GAS_LIMIT = createField(DSL.name("gas_limit"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ommer.gas_used</code>.
     */
    public final TableField<OmmerRecord, Long> GAS_USED = createField(DSL.name("gas_used"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ommer.timestamp</code>.
     */
    public final TableField<OmmerRecord, Timestamp> TIMESTAMP = createField(DSL.name("timestamp"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.ommer.mix_hash</code>.
     */
    public final TableField<OmmerRecord, String> MIX_HASH = createField(DSL.name("mix_hash"), org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.ommer.logs_bloom</code>.
     */
    public final TableField<OmmerRecord, String> LOGS_BLOOM = createField(DSL.name("logs_bloom"), org.jooq.impl.SQLDataType.CHAR(514).nullable(false), this, "");

    /**
     * Create a <code>public.ommer</code> table reference
     */
    public Ommer() {
        this(DSL.name("ommer"), null);
    }

    /**
     * Create an aliased <code>public.ommer</code> table reference
     */
    public Ommer(String alias) {
        this(DSL.name(alias), OMMER);
    }

    /**
     * Create an aliased <code>public.ommer</code> table reference
     */
    public Ommer(Name alias) {
        this(alias, OMMER);
    }

    private Ommer(Name alias, Table<OmmerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ommer(Name alias, Table<OmmerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Ommer(Table<O> child, ForeignKey<O, OmmerRecord> key) {
        super(child, key, OMMER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_OMMER__HASH, Indexes.IDX_OMMER__HEIGHT, Indexes.IDX_OMMER__INDEX, Indexes.IDX_OMMER__NEPHEW_HASH, Indexes.IDX_OMMER__NUMBER_DESC, Indexes.OMMER_PKEY);
    }

    @Override
    public UniqueKey<OmmerRecord> getPrimaryKey() {
        return Keys.OMMER_PKEY;
    }

    @Override
    public List<UniqueKey<OmmerRecord>> getKeys() {
        return Arrays.<UniqueKey<OmmerRecord>>asList(Keys.OMMER_PKEY);
    }

    @Override
    public List<ForeignKey<OmmerRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OmmerRecord, ?>>asList(Keys.OMMER__OMMER_NEPHEW_HASH_FKEY);
    }

    public BlockHeader blockHeader() {
        return new BlockHeader(this, Keys.OMMER__OMMER_NEPHEW_HASH_FKEY);
    }

    @Override
    public Ommer as(String alias) {
        return new Ommer(DSL.name(alias), this);
    }

    @Override
    public Ommer as(Name alias) {
        return new Ommer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ommer rename(String name) {
        return new Ommer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ommer rename(Name name) {
        return new Ommer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<String, Long, String, Long, String, Integer, Long, String, String, String, String, String, BigDecimal, byte[], Long, Long, Timestamp, String, String> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
}
